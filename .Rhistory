# majorGradeCombos
pick_courseStructure=stringr::str_detect(courseStructure$"應修系級","系")
# majorGradeCombos
pick_courseStructure=stringr::str_detect(courseStructure$"應修系級","系")
pick_courseStructure
# majorGradeCombos
pick_courseStructure=stringr::str_detect(courseStructure$"應修系級","系1")
# majorGradeCombos
pick_courseStructure=stringr::str_detect(courseStructure$"應修系級","系1")
pick_courseStructure
# majorGradeCombos
majorGradeCombos<-"系＋[1-4]"
# majorGradeCombos
majorGradeCombos<-"系＋[1-4]"
str_view_all(majorGradeCombos)
# majorGradeCombos
majorGradeCombos<-"系＋[1-4]"
str(majorGradeCombos)
# majorGradeCombos
classes=c(courseStructure$應修系級)
majorGradeCombos<-"系＋[1-4]"
str_view_all(classes,majorGradeCombos)
# majorGradeCombos
classes=c(courseStructure$應修系級)
majorGradeCombos<-"系＋[1-4]"
str(classes,majorGradeCombos)
# majorGradeCombos
classes=c(courseStructure$應修系級)
majorGradeCombos<-"系＋[1-4]"
str_view(classes,majorGradeCombos)
# majorGradeCombos
classes=c(courseStructure$應修系級)
majorGradeCombos<-"系＋[1-4]"
str_extract(classes,majorGradeCombos)
knitr::opts_chunk$set(echo = TRUE)
phrase <- c("唧唧复唧唧")
# 目標是前面的唧唧
target_regex <- "唧唧"
pattern <- glue::glue("^{target_regex}")
print(pattern)
str_view(phrase, pattern)
# majorGradeCombos
classes=c(courseStructure$應修系級)
majorGradeCombos<-"系＋[1-4]"
str_view_all(classes,majorGradeCombos)
data228 <- readr::read_csv("https://www.dropbox.com/s/64yf3uq8wtvb5q7/%E4%BA%8C%E4%BA%8C%E5%85%AB%E4%BA%8B%E4%BB%B6%E4%BA%BA%E5%90%8D%E7%B4%A2%E5%BC%95.csv?dl=1")
View(data228)
data228 <- readr::read_csv("https://www.dropbox.com/s/64yf3uq8wtvb5q7/%E4%BA%8C%E4%BA%8C%E5%85%AB%E4%BA%8B%E4%BB%B6%E4%BA%BA%E5%90%8D%E7%B4%A2%E5%BC%95.csv?dl=1")
# data228[c("全宗名編號","年")]
data228[[5,6]]<-c("全宗名編號","年")
# data228[c("全宗名編號","年")]
data228[[c(5,6)]]<-c("全宗名編號","年")
# data228[c("全宗名編號","年")]
data228[c(5,6)]<-c("全宗名編號","年")
# data228[c("全宗名編號","年")]
data228[c(5,6)]<-c("全宗名編號","年")
# data228[c("全宗名編號","年")]
data228[c(5,6)]<-c("全宗名編號","年")
# data228[c("全宗名編號","年")]
data228[c(5,6)]<-c("全宗名編號","年")
# data228[c("全宗名編號","年")]
data228[c(5,6)]<-c("全宗名編號","年")
# data228[c("全宗名編號","年")]
data228[[5]]<-"全宗名編號"
### 2.2 人犯名單
「data228$附註」元素裡有個元素值為"表冊名稱:臺灣省二二八事變正法及死亡人犯名冊"，請依照以此表冊所屬「檔號」去找出與它有關的「個人名稱」將這些人名（不重覆的）存在victims物件裡（class character）
# data228[c("全宗名編號","年")]
data228[[5]]<-"全宗名編號"
# data228[c("全宗名編號","年")]
data228[["全宗名編號"]]<-
# data228[c("全宗名編號","年")]
data228[["全宗名編號"]]<-data228$檔號(?<=A)target_pattern(?=A)
# data228[c("全宗名編號","年")]
data228[["全宗名編號"]]<-data228$檔號,(?<=A)target_pattern(?=A)
# data228[c("全宗名編號","年")]
data228[["全宗名編號"]]<-str_extract_all(data228$檔號,(?<=A)target_pattern(?=A))
# data228[c("全宗名編號","年")]
k=data228$檔號
str(k)
data228[["全宗名編號"]]<-str_extract_all(data228$檔號,(?<=A)target_pattern(?=A))
# data228[c("全宗名編號","年")]
k=data228$檔號
str(k)
# data228[c("全宗名編號","年")]
k=data228$檔號
str(k)
data228[["全宗名編號"]]<-str_extract_all(k,(?<=A)target_pattern(?=A))
# data228[c("全宗名編號","年")]
k=data228$檔號
View(data228)
View(data228)
data228 <- readr::read_csv("https://www.dropbox.com/s/64yf3uq8wtvb5q7/%E4%BA%8C%E4%BA%8C%E5%85%AB%E4%BA%8B%E4%BB%B6%E4%BA%BA%E5%90%8D%E7%B4%A2%E5%BC%95.csv?dl=1")
# majorGradeCombos
classes=c(courseStructure$應修系級)
majorGradeCombos<-"系＋[1-4]"
str(classes,majorGradeCombos)
# majorGradeCombos
classes=c(courseStructure$應修系級)
majorGradeCombos<-"系＋[1-4]"
majorGradeCombos=unique(majorGradeCombos)
str(classes,majorGradeCombos)
View(check_regexRestriction)
# majorGradeCombos
classes=c(courseStructure$應修系級)
majorGradeCombos<-"系＋[1-4]"
majorGradeCombos=unique(majorGradeCombos)
str(majorGradeCombos)
# majorGradeCombos
majorGradeCombos=c(courseStructure$應修系級)
majorGradeCombos=unique(majorGradeCombos)
str(majorGradeCombos)
# majorGradeCombos
majorGradeCombos=c(courseStructure$應修系級)
majorGradeCombos=unique(majorGradeCombos)
(majorGradeCombos)
# majorGradeCombos
majorGradeCombos=c(courseStructure$應修系級)
majorGradeCombos=stringr::str_detect(majorGradeCombos,"系")
majorGradeCombos=unique(majorGradeCombos)
(majorGradeCombos)
# majorGradeCombos
majorGradeCombos=c(courseStructure$應修系級)
majorGradeCombos=unique(majorGradeCombos)
(majorGradeCombos)
# majorGradeCombos
majorGradeCombos=c(courseStructure$應修系級)
str_extract_all=majorGradeCombos,"(?<=[:graph:]){1,2,3,4,5,6,7,8,9,}(?=[:digit:])"
# 目標是前面的唧唧
str_extract_all(
"我的名字8293叫17380小abce明",
"[\u4E00-\u9FFF]+")
# majorGradeCombos
majorGradeCombos=c(courseStructure$應修系級)
(majorGradeCombos)
# majorGradeCombos
majorGradeCombos=c(courseStructure$應修系級)
str_extract_all=majorGradeCombos,"(?<=[:graph:])(?=[:digit:])"
# majorGradeCombos
majorGradeCombos=c(courseStructure$應修系級)
majorGradeCombos=str_extract_all(majorGradeCombos,"(?<=[:graph:])(?=[:digit:])")
majorGradeCombos=unique(majorGradeCombos)
(majorGradeCombos)
# majorGradeCombos
majorGradeCombos=c(courseStructure$應修系級)
majorGradeCombos=str_extract_all(majorGradeCombos,"(?<=[:graph:])+[系|組](?=[:digit:])")
# majorGradeCombos
majorGradeCombos=c(courseStructure$應修系級)
majorGradeCombos=str_extract_all(majorGradeCombos,"(?<=[:graph:]){target_regex}(?=[:digit:])")
# majorGradeCombos
majorGradeCombos=c(courseStructure$應修系級)
majorGradeCombos=str_extract_all(majorGradeCombos,[:graph:]+(系|組)[:digit:]
# majorGradeCombos
majorGradeCombos=c(courseStructure$應修系級)
majorGradeCombos=str_extract_all(majorGradeCombos,[:graph:]+(系|組)[:digit:])
# majorGradeCombos
majorGradeCombos=c(courseStructure$應修系級)
majorGradeCombos=str_extract_all(majorGradeCombos,[:graph:]+(系|組)[:digit:])
# majorGradeCombos
majorGradeCombos=c(courseStructure$應修系級)
majorGradeCombos=str_extract_all(majorGradeCombos,[:graph:]+(系|組)[:digit:])
# majorGradeCombos
majorGradeCombos=c(courseStructure$應修系級)
majorGradeCombos=str_extract_all(majorGradeCombos,[:graph:]+(系|組)[:digit:])
# majorGradeCombos
majorGradeCombos=c(courseStructure$應修系級)
majorGradeCombos=str_extract_all(majorGradeCombos,[:graph:]+(系|組)[:digit:])
# majorGradeCombos
majorGradeCombos=c(courseStructure$應修系級)
majorGradeCombos=str_extract_all(majorGradeCombos,[:graph:]+(系|組)[:digit:])
# majorGradeCombos
majorGradeCombos=c(courseStructure$應修系級)
majorGradeCombos=str_extract_all(majorGradeCombos,[:graph:]+(系|組)[:digit:])
# tpe_highSchools
levels(tpe_highSchools)<-c("臺北市立第一女中","台北市立第一女子高級中學","中山女中","中山女高", "台北市立中山女中", "臺北市立中山女子高級中學","國立政大附中", "國立政治大學附屬高級中學","北一女")
tpe_highSchools[c(680,681,682,683,684,685,686,687,688,689)]<-c(rep("北一女", times = 10))
tpe_highSchools
# majorGradeCombos
regex_31<-"[:gragh:]+(系|組)[:digit:]"
str_extract(courseStructure$應修系級,"regex_31")
# majorGradeCombos
regex_31<-"[:gragh:]+(系)[:digit:]"
str_extract(courseStructure$應修系級,"regex_31")
# majorGradeCombos
regex_31<-"[:gragh:]+{系}[:digit:]"
str_extract(courseStructure$應修系級,"regex_31")
# majorGradeCombos
regex_31<-"[:gragh:]+{target_pattern}[:digit:]"
str_extract(courseStructure$應修系級,"regex_31")
# majorGradeCombos
regex_31<-"[:gragh:]+{target_pattern}[:digit:]"
str_extract_all(courseStructure$應修系級,"regex_31")
# majorGradeCombos
regex_31<-"[:gragh:]+{target_pattern}[:digit:]"
str_extract(courseStructure$應修系級,"regex_31")
# 目標是前面的唧唧
str_extract_all(
c("民國108年12月5日","民國98年10月5日"),
"(?<=民國)[0-9]{2,3}(?=年)"
) # 回傳list
str_extract(
c("民國108年12月5日","民國98年10月5日"),
"(?<=民國)[0-9]{2,3}(?=年)"
) # 回傳vector
# majorGradeCombos
regex<- "(?<=[:graph:])[\u4E00-\u9FFF](?=[:digit:])"
str_extract(courseStructure$應修系級,"regex")
# majorGradeCombos
str_extract(courseStructure$應修系級,"(?<=[:graph:])[\u4E00-\u9FFF](?=[:digit:])")
# majorGradeCombos
str_extract(courseStructure$應修系級,"(?<=[:graph:])[\u4E00-\u9FFF]+(?=[:digit:])")
View(data228)
View(data228)
View(courseStructure)
View(courseStructure)
# tpe_highSchools
levels(tpe_highSchools)<-c("臺北市立第一女中","台北市立第一女子高級中學","中山女中","中山女高", "台北市立中山女中", "臺北市立中山女子高級中學","國立政大附中", "國立政治大學附屬高級中學","北一女")
tpe_highSchools[c(680::689)]<-c(rep("北一女", times = 10))
# majorGradeCombos
str_extract(courseStructure$應修系級,"(?=[:graph:])[\u4E00-\u9FFF]+(?=[:digit:])")
# majorGradeCombos
str_extract(courseStructure$應修系級,"(?=[:graph:])[\u4E00-\u9FFF]+(?=>[:digit:])")
# majorGradeCombos
str_extract(courseStructure$應修系級,"(?=[:graph:])[\u4E00-\u9FFF]+(?=[:digit:])")
# majorGradeCombos
str_extract(courseStructure$應修系級,"(?=[:graph:])[\u4E00-\u9FFF]+(=[:digit:])")
# majorGradeCombos
str_extract(courseStructure$應修系級,"(?=[:graph:])[\u4E00-\u9FFF]+(?=[:digit:])")
# majorGradeCombos
str_extract(courseStructure$應修系級,"(?=[:graph:])[\u4E00-\u9FFF]+(?=[:digit:])")
# majorGradeCombos
str_extract(courseStructure$應修系級,"(?=[:graph:])[系]+(?=[:digit:])")
# majorGradeCombos
str_extract(courseStructure$應修系級,"(?=[:graph:])[\u4E00-\u9FFF]+(?=[:digit:])")
# majorGradeCombos
str_extract(courseStructure$應修系級,"(?=[:graph:])[\u4E00-\u9FFF]+[:digit:](?=[:digit:])")
# majorGradeCombos
str_extract(courseStructure$應修系級,"(?=[:graph:])[\u4E00-\u9FFF]+[1-4](?=[:digit:])")
# majorGradeCombos
str_extract(courseStructure$應修系級,"(?=[:graph:])[\u4E00-\u9FFF]+(?=[:digit:])")
# majorGradeCombos
str_extract(courseStructure$應修系級,"(?=[:graph:])([\u4E00-\u9FFF]+[:digit:])(?=[:digit:])")
# majorGradeCombos
str_extract(courseStructure$應修系級,"(?=[:graph:]){[\u4E00-\u9FFF]+[:digit:]}(?=[:digit:])")
# majorGradeCombos
str_extract(courseStructure$應修系級,"(?=[:graph:])[\u4E00-\u9FFF]+[:digit:](?=[:digit:])")
# majorGradeCombos
str_extract(courseStructure$應修系級,"(?=[:graph:])[\u4E00-\u9FFF]+1(?=[:digit:])")
# majorGradeCombos
str_extract(courseStructure$應修系級,"(?=[:graph:])[\u4E00-\u9FFF]+(?=[:digit:])")
# majorGradeCombos
str_extract(courseStructure$應修系級,"(?=[:graph:])[\u4E00-\u9FFF]++(?=[:digit:])")
# majorGradeCombos
str_extract(courseStructure$應修系級,"(?=[:graph:])"[\u4E00-\u9FFF]+1"(?=[:digit:])")
# majorGradeCombos
str_extract(courseStructure$應修系級,"(?=[:graph:])"[\u4E00-\u9FFF]"(?=[:digit:])")
# majorGradeCombos
str_extract(courseStructure$應修系級,"(?=[:graph:])[\u4E00-\u9FFF](?=[:digit:])")
# majorGradeCombos
str_extract(courseStructure$應修系級,"(?=[:graph:])[\u4E00-\u9FFF+(?=[:digit:])")
# majorGradeCombos
str_extract(courseStructure$應修系級,"(?=[:graph:])[\u4E00-\u9FFF]+(?=[:digit:])")
# majorGradeCombos
str_extract(courseStructure$應修系級,"(?=[:graph:])[\u4E00-\u9FFF]+(?=[:graph:])")
# majorGradeCombos
str_extract(courseStructure$應修系級,"(?=[:graph:])[\u4E00-\u9FFF]+")
# majorGradeCombos
str_extract(courseStructure$應修系級,"(?=[:graph:])[\u4E00-\u9FFF]+")
# majorGradeCombos
str_extract(courseStructure$應修系級,"(?=[:graph:])[:graph:]+")
check_regexRestriction("臺台北市立第一女子高級中學",regex_hs1st)
# regex_hs1st
regex_hs1st<-("台?臺?北?市?立?第?一女(子)?高?級?中?學?")
# regex_hs1st
regex_hs1st<-("台?臺?北?市?立?第?一女(子)?高?級?中?學?")
regex_hs1st
# regex_hs1st
regex_hs1st<-("台?臺?北?市?立?第?一女(子)?高?級?中?學?")
regex
# tpe_highSchools
levels(tpe_highSchools)<-c("臺北市立第一女中","台北市立第一女子高級中學","中山女中","中山女高", "台北市立中山女中", "臺北市立中山女子高級中學","國立政大附中", "國立政治大學附屬高級中學","北一女")
tpe_highSchools[c(680,681,682,683,684,685,686,687,688,689)]<-c(rep("北一女", times = 10))
tpe_highSchools
# regex_hs1st
regex_hs1st<-("台?臺?北?市?立?第?一女(子)?高?級?中?學?")
check_regexRestriction("臺台北市立第一女子高級中學",regex_hs1st)
currentLevels <- levels(tpe_highSchools)
str_replace(currentLevels,regex_hs1st,"北一女") -> levels(tpe_highSchools)
levels(tpe_highSchools)
check_regexRestriction("臺台北市立第一女子高級中學",regex_hs1st)
currentLevels <- levels(tpe_highSchools)
str_replace(currentLevels,regex_hs1st,"北一女") -> levels(tpe_highSchools)
levels(tpe_highSchools)
levels(tpe_highSchools)
check_regexRestriction("高級中學",regex_hsTitle)
# regex_hsTitle
regex_hs1st
# regex_hsTitle
regex_hsTitle
# regex_hsTitle
regex_hsTitle<-("中$|高$|高級中學$")
check_regexRestriction("高級中學",regex_hsTitle)
currentLevels <- levels(tpe_highSchools)
str_remove(
currentLevels,regex_hsTitle
) -> levels(tpe_highSchools)
levels(tpe_highSchools)
levels(tpe_highSchools)
# majorGradeCombos
majorGradeCombos=str_extract(courseStructure$應修系級,"(?=[:graph:])[:graph:]+")
majorGradeCombos=unique(majorGradeCombos)
# majorGradeCombos
majorGradeCombos=str_extract(courseStructure$應修系級,"(?=[:graph:])[:graph:]+")
majorGradeCombos=unique(majorGradeCombos)
majorGradeCombos
# econ101junior
econ101junior=courseStructure$學年[104]
# econ101junior
econ101junior=courseStructure$學年[104]
econ101junior
# econ101junior
econ101junior=courseStructure$學年
econ101junior
# econ101junior
econ101junior=courseStructure$學年[[104]]
econ101junior
jsonlite::fromJSON(
"https://www.dropbox.com/s/jckqryeh5zeat5w/regionPopulation.json?dl=1"
) -> population
unlist(population) -> population
# majorGradeCombos
majorGradeCombos=str_extract(courseStructure$應修系級,"(?=[:graph:])[:graph:]+")
majorGradeCombos=unlist(majorGradeCombos)
majorGradeCombos=unique(majorGradeCombos)
majorGradeCombos
# majorGradeCombos
majorGradeCombossss=str_extract(courseStructure$應修系級,"(?=[:graph:])[:graph:]+")
majorGradeComboss=unlist(majorGradeCombossss)
majorGradeCombos=unique(majorGradeComboss)
majorGradeCombos
# majorGradeCombos
majorGradeCombossss=str_extract(courseStructure$應修系級,"(?=[:graph:])[:graph:]+")
majorGradeComboss=strsplit(majorGradeCombossss)
# majorGradeCombos
majorGradeCombossss=str_extract(courseStructure$應修系級,"(?=[:graph:])[:graph:]+")
majorGradeComboss=str_split(majorGradeCombossss)
# majorGradeCombos
majorGradeCombos=str_extract(courseStructure$應修系級,"(?=[:graph:])[:graph:]+")
majorGradeCombos=str_split(majorGradeCombos)
# majorGradeCombos
str_split(courseStructure$應修系級,"、") %>%
unlist(.)->aaaaa
map(aaaaa,~str_extract(.x,"([:graph:])+[系|組]+([:digit:])")) %>%
unique(.)%>%
unlist(.)->majorGradeCombos
majorGradeCombos[c(-3)]->majorGradeCombos
majorGradeCombos
# data228[c("全宗名編號","年")]
pick_note<-data228$`檔號`[data228$`附註`=="表冊名稱:臺灣省二二八事變正法及死亡人犯名冊"]
pick_name<-data228$`個人名稱`[data228$檔號==pick_note]
victims<-levels(factor(pick_name))
victims
# victims
"全宗名編號"<-str_extract(data228$"檔號","[:upper:][:graph:]+[:upper:](?=/)")
"全宗名編號"<-factor("全宗名編號")
"年"<-str_extract(data228$"檔號","(?<=/)[:alnum:]{4}(?=/)")
"年"<-as.integer("年")
data228[["全宗名編號"]]<-"全宗名編號"
data228[["年"]]<-"年"
data228[c("全宗名編號","年")]
# victims
pick_note<-data228$檔號[data228$附註=="表冊名稱:臺灣省二二八事變正法及死亡人犯名冊"]
pick_name<-data228$個人名稱[data228$檔號==pick_note]
victims<-levels(factor(pick_name))
victims
# data228[c("全宗名編號","年")]
"全宗名編號"<-str_extract(data228$檔號,"[:upper:][:graph:]+[:upper:](?=/)")
"全宗名編號"<-factor("全宗名編號")
"年"<-str_extract(data228$檔號,"(?<=/)[:alnum:]{4}(?=/)")
"年"<-as.integer("年")
data228[["全宗名編號"]]<-"全宗名編號"
data228[["年"]]<-"年"
data228[c("全宗名編號","年")]
knitr::opts_chunk$set(echo = TRUE)
# p=1.2的需求量
p=1.2
qd <- 10-5*p # 小心是5*p, 不能寫5p
# p=1.3的需求量
p=1.3
qd <- 10-5*p
# p=1.4的需求量
p=1.4
qd <- 10-5*p
# p=1.2的需求量
p=1.2
qd <- 10-5*p # 小心是5*p, 不能寫5p
# p=1.3的需求量
p=1.3
qd <- 10-5*p
# p=1.4的需求量
p=1.4
qd <- 10-5*p
demand <- # 創造一個物件叫demand
function(p){ # 定義這個物件為函數
q_d <- 10-5*p # 小心是5*p, 不能寫5p
}
View(demand)
# p=1.2的需求量
demand(1.2)
# p=1.3的需求量
demand(1.3)
# p=1.4的需求量
demand(1.4)
demand_return <-
function(p){
q_d <- 10-5*p
return(q_d)
}
# 印在螢幕，但Global Environment並不會有q_d
demand_return(1.2)
.Last.value
dateInput <- today()
dateInput <- today()
locationInput <- "新北市"
jsonlite::fromJSON("https://opendata.cwb.gov.tw/fileapi/v1/opendataapi/F-C0032-001?Authorization=rdec-key-123-45678-011121314&format=JSON") ->
weather_next36hours
locationInput <- "新北市"
jsonlite::fromJSON("https://opendata.cwb.gov.tw/fileapi/v1/opendataapi/F-C0032-001?Authorization=rdec-key-123-45678-011121314&format=JSON") ->
weather_next36hours
# 找出符合地點的天氣資訊：weatherAtLocation
(weather_next36hours$cwbopendata$dataset$location$locationName == locationInput) -> pick_location # 可挑出locationInput的「要/不要」向量
weather_next36hours$cwbopendata$dataset$location$weatherElement[pick_location][[1]] -> weatherAtLocation
# 在weatherAtLocation找出符合時間的天氣資訊
(weatherAtLocation$elementName=="MaxT") ->
pick_MaxT
(weatherAtLocation$elementName=="MinT") ->
pick_MinT
weatherAtLocation$time[pick_MaxT][[1]]$parameter$parameterName[[1]] -> maxT
weatherAtLocation$time[pick_MinT][[1]]$parameter$parameterName[[1]] -> minT
glue::glue("{locationInput} {dateInput} 氣溫，最高{maxT}度，最低{minT}度。")
.Last.value
library(magrittr)
locationInput <- "新北市"
jsonlite::fromJSON("https://opendata.cwb.gov.tw/fileapi/v1/opendataapi/F-C0032-001?Authorization=rdec-key-123-45678-011121314&format=JSON") ->
weather_next36hours
# 找出符合地點的天氣資訊：weatherAtLocation
(weather_next36hours$cwbopendata$dataset$location$locationName == locationInput) -> pick_location # 可挑出locationInput的「要/不要」向量
weather_next36hours$cwbopendata$dataset$location$weatherElement[pick_location][[1]] -> weatherAtLocation
# 在weatherAtLocation找出符合時間的天氣資訊
(weatherAtLocation$elementName=="MaxT") ->
pick_MaxT
(weatherAtLocation$elementName=="MinT") ->
pick_MinT
weatherAtLocation$time[pick_MaxT][[1]]$parameter$parameterName[[1]] -> maxT
weatherAtLocation$time[pick_MinT][[1]]$parameter$parameterName[[1]] -> minT
glue::glue("{locationInput} {dateInput} 氣溫，最高{maxT}度，最低{minT}度。")
install.packages(lubridate)
dateInput <- today()
library(lubridate)
dateInput <- lubridate::today()
locationInput <- "新北市"
jsonlite::fromJSON("https://opendata.cwb.gov.tw/fileapi/v1/opendataapi/F-C0032-001?Authorization=rdec-key-123-45678-011121314&format=JSON") ->
weather_next36hours
# 找出符合地點的天氣資訊：weatherAtLocation
(weather_next36hours$cwbopendata$dataset$location$locationName == locationInput) -> pick_location # 可挑出locationInput的「要/不要」向量
weather_next36hours$cwbopendata$dataset$location$weatherElement[pick_location][[1]] -> weatherAtLocation
# 在weatherAtLocation找出符合時間的天氣資訊
(weatherAtLocation$elementName=="MaxT") ->
pick_MaxT
(weatherAtLocation$elementName=="MinT") ->
pick_MinT
weatherAtLocation$time[pick_MaxT][[1]]$parameter$parameterName[[1]] -> maxT
weatherAtLocation$time[pick_MinT][[1]]$parameter$parameterName[[1]] -> minT
glue::glue("{locationInput} {dateInput} 氣溫，最高{maxT}度，最低{minT}度。")
askSilly_weather <- function(locationInput,dateInput){
jsonlite::fromJSON("https://opendata.cwb.gov.tw/fileapi/v1/opendataapi/F-C0032-001?Authorization=rdec-key-123-45678-011121314&format=JSON") ->
weather_next36hours
(weather_next36hours$cwbopendata$dataset$location$locationName == locationInput) -> pick_location
weather_next36hours$cwbopendata$dataset$location$weatherElement[pick_location][[1]] -> weatherAtLocation
(weatherAtLocation$elementName=="MaxT") ->
pick_MaxT
(weatherAtLocation$elementName=="MinT") ->
pick_MinT
weatherAtLocation$time[pick_MaxT][[1]]$parameter$parameterName[[1]] -> maxT
weatherAtLocation$time[pick_MinT][[1]]$parameter$parameterName[[1]] -> minT
glue::glue("{locationInput} {dateInput} 氣溫，最高{maxT}度，最低{minT}度。")
}
askSilly_weather("臺中市",today())
askSilly_weather("花蓮縣",today())
what_time_it_is("Europe/Paris")
what_time_it_is("Europe/Paris")
what_time_it_is("Europe/Paris")
class(demand_return)
class(demand_return)
# 查詢函數formals arguments要求
formals(askSilly_weather)
class(demand_return)
# 查詢函數formals arguments要求
formals(askSilly_weather)
# 查詢函數主體
body(askSilly_weather)
knitr::opts_chunk$set(echo = F, eval=F)
library(jsonlite); library(lubridate); library(readr); library(stringr); library(purrr); library(magrittr)
regex_hsTitle <-
"[高級中學]+$"
# regex_hsTitle
knitr::opts_chunk$set(echo = TRUE)
# 先執行此行輸入學號
readline(prompt = "410773036") -> studentId
summary(cars)
```{r}
# 先執行此行輸入學號
readline(prompt = "請輸入你的學號") -> studentId
